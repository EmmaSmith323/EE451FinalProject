Structure of the actual program 


Input to the Program: 
	Size of each person size (how many bits per person string) 
Size of chunk of bits
Favorable bit chunks 
Done by command line 


./finalproj 8 4 ‘1011’ ‘1000’ ‘1111’ 


For our own testing: 
Create a file of a bunch of bits as our local ‘search space’ 
Perhaps this can be a simple picture-to-bits conversion just to get random selection of bits 


Ideas in implementation: 
Goal: Iterate until the total population of generation is 70% favorable

Data structure : 128 * 128 2D Matrix, each location stores “n” size string of binary bits

Master slave - every computation is done in one thread 

Initial state of the matrix: even rows are bits of size n all 0’s, size of n bits all 1’s. 
for(int i =0; i<m_size; i++){
	for(int j = 0; j<m_size; j++){
		if(i%2 == 0) { //row is even 
			Bits of size All 0’s; 
		} else { 
Bits of size All 1’s 
} 
}
}
//capacity could be 70% favorable outcome
//capacity is the value that all threads commit to 
Define num_threads 16; 


char*  [m_space] [m_space] m_space;
 Int chunk_size; //size of chunk 
Int n; // size of string length 
char[chunk_size] fav; ///give this to the threads 

Int numBlocks = n/chunk_size; 



while(!fav_capacity) {
	//crossover - for all in mating pool, pick a random partner, switch one random block
Vector<char**> matingPool [ m_size*m_size];

	for(ink =0; k<m_size/2 ; k++){
		
		//crossover 
Int firstIndex = rand % m_size^2;
		Int secondIndex = rand % m_size^2;

char* m1 = matingPool.at(firstIndex);
char* m2 = matingPool.at(secondIndex); 


//Recombination - save the new values determined by crossover
		Int blockID = rand%numBlocks;; 
		swap(m1, m2, block_swap*chunk_size);

		matingPool.remove[firstIndex ];
matingPool.remove[secondIndex  ];
}

	//Mutation - rare chance to flip one bit
	//10 % of people get mutated every iteration
	for (int i = 0; i < m_size^2; i++) {
	Int chance = rand%100;
	if(chance < 10) {
		Int bit = rand%n;
		mutate(m_size[i], bit);
	}
	}
	//update capacity value by using slaves
	//split the m_size*m_size matrix into num_threads amount of threads
	for(int j = 0; j<num_threads; j++){
		Thread[j] gets (thread_index); 
}

//thread join 


//after thread join, decide population number 
double total_fav_pop = 0;
for(int i =0; i<num_threads; i++){
	Total_fav_pop += threads[i].local_count; 
}

//total_fav_pop now has all of favorable people 

//decide capacity 
//70% favorable 
Double population = m_size * m_size; 
Double cap = total_fav_pop / population; 

if(cap >= .7) {
	fav_capacity = true; 
}


}


Void swap(char** a, char** b, int start){
	char* temp =a;
	for(i = start; i < start+chunk_size;i++) {
		a[i] = b[i]; 
		B[i] = temp[i];  
}


Void mutate(char** a, index) {
	a[index] = ~a[index];
}


//THREAD FUNCTION 
Void count_fav( int thread_index ) {
Int start = thread_index *(m_size * m_size ) / num_threads;
	Int end = start + (m_size * m_size ) / num_threads; 
	Int local_count = 0; 

	for(int i = start; i<end; i++){
		//check favorability of m_space[i]; 
		Char[chunk_size] my_string = m_space[i]; 

		if(check_fav(my_string)) {
			local_count++;
		}
	}
}

check_fav(char* fav, char* a ){
	for(int j=0; j<n/chunk_size; j++){
Int sameBits = 0;
for(k=0; k<chunk_size; k++){
Int index = j * chunk_size + k; 
if(a[index] == fav[k]){
sameBits++;
}
		 }
if(sameBits == chunk_size){
			Return true;	    
}
}
Return false;
}



/* IDEA*/ 
Doubly linked list for matingPool, every iteration make a new doubly linked list with full size of every element in the m_space. 
Decide which two are going to crossover 
Remove both elements from the linked list \




               
                char*m1;
                char*m2;

